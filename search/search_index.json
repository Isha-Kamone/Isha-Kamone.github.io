{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"e-Yantra IoT Framework Project Overview Our project, 'e-Yantra IoT Framework' attempts on creating a framework specifically designed to carry out IoT based applications with ease and without much hassle. So, what makes this framework unique! For starters, the entire framework is based on tools and services which are available for free which in turn make this framework completely free. Event Driven Programming In this framework emphasis is given on Event-Driven Programming over Sequential Programming. This is because, IoT applications are an event driven system and using sequential programming techniques to develop event driven systems is hard and does not make much sense. The framework consists of APIs which users can use in the code as per their need. All the user will have to do is to write user defined functions and attach it to the set of events defined in the framework. So, whenever any IoT event occurs the user defined function attached to that event will be executed automatically without having the user call the function explicitly in main() or elsewhere. Further information and usage details of these APIs will be discussed in the further sections in depth. Why use eY IoT Framework? There are frameworks like Azure IoT, AWS IoT, etc already designed for similar IoT based applications but what makes this framework stand apart from them is the fact that since this framework is entirely based on free tools and services it itself becomes free for use . On the other hand, the existing frameworks offer paid services. Secondly, people who are just starting out in the IoT field are already unfamiliar with many concepts and are in the learning phase. At that time if they are made to get acquaint with frameworks having steep learning curves , that in itself can act as a demotivation . This framework uses tools which many may have already used apart from IoT applications like Github and Google Spreadsheet. Usage of such tools and overall design makes this framework very user-friendly and simple ! So with this free, easy to use framework we wish to ease out on your load while developing IoT applications and we hope it fulfils this purpose with a great deal of satisfaction! :) Technology Stack The tools and services we have used in the framework are as follows: Google Spreadsheet as database. Google App Scripting for generating alert notifications. MQTT X , a public MQTT server. Public NTP server pool.ntp.org for timekeeping. ip-api.com for IP based Geo-location. So, what activities will a user be able to carry out with this developed framework. Let's take a look... Database: Google Sheets An ESP32 based endpoint like eYFi-Mega, connected to the internet can directly push sensor data to Google Spreadsheet using this framework. Google Sheets has upper limit of 5 Million rows. So, if you are logging sensor data at an interval of 1 minute then Google Sheets will allow you to log data for 9 years !! Google Sheets is very powerful tool which can allow user to make sense out of their IoT Data which is also a crucial part of IoT. Alert Notifications: Google Apps Scripting The framework offers a facility of alerting the user via an e-mail if the sensor readings exceed a certain pre-defined threshold. Our Google Apps Script attached to Google Sheets makes this happen. Timekeeping: Public NTP Servers Syncing internal clock with NTP server clock for timekeeping. NTP as you know stands for Network Time Protocol which is a networking protocol for clock synchronization between computer systems. Using this framework you just have to use one line of code to sync internal clock of your IoT device with NTP server time.","title":"Home"},{"location":"#project-overview","text":"Our project, 'e-Yantra IoT Framework' attempts on creating a framework specifically designed to carry out IoT based applications with ease and without much hassle. So, what makes this framework unique! For starters, the entire framework is based on tools and services which are available for free which in turn make this framework completely free.","title":"Project Overview"},{"location":"#event-driven-programming","text":"In this framework emphasis is given on Event-Driven Programming over Sequential Programming. This is because, IoT applications are an event driven system and using sequential programming techniques to develop event driven systems is hard and does not make much sense. The framework consists of APIs which users can use in the code as per their need. All the user will have to do is to write user defined functions and attach it to the set of events defined in the framework. So, whenever any IoT event occurs the user defined function attached to that event will be executed automatically without having the user call the function explicitly in main() or elsewhere. Further information and usage details of these APIs will be discussed in the further sections in depth.","title":"Event Driven Programming"},{"location":"#why-use-ey-iot-framework","text":"There are frameworks like Azure IoT, AWS IoT, etc already designed for similar IoT based applications but what makes this framework stand apart from them is the fact that since this framework is entirely based on free tools and services it itself becomes free for use . On the other hand, the existing frameworks offer paid services. Secondly, people who are just starting out in the IoT field are already unfamiliar with many concepts and are in the learning phase. At that time if they are made to get acquaint with frameworks having steep learning curves , that in itself can act as a demotivation . This framework uses tools which many may have already used apart from IoT applications like Github and Google Spreadsheet. Usage of such tools and overall design makes this framework very user-friendly and simple ! So with this free, easy to use framework we wish to ease out on your load while developing IoT applications and we hope it fulfils this purpose with a great deal of satisfaction! :)","title":"Why use eY IoT Framework?"},{"location":"#technology-stack","text":"The tools and services we have used in the framework are as follows: Google Spreadsheet as database. Google App Scripting for generating alert notifications. MQTT X , a public MQTT server. Public NTP server pool.ntp.org for timekeeping. ip-api.com for IP based Geo-location. So, what activities will a user be able to carry out with this developed framework. Let's take a look...","title":"Technology Stack"},{"location":"#database-google-sheets","text":"An ESP32 based endpoint like eYFi-Mega, connected to the internet can directly push sensor data to Google Spreadsheet using this framework. Google Sheets has upper limit of 5 Million rows. So, if you are logging sensor data at an interval of 1 minute then Google Sheets will allow you to log data for 9 years !! Google Sheets is very powerful tool which can allow user to make sense out of their IoT Data which is also a crucial part of IoT.","title":"Database: Google Sheets"},{"location":"#alert-notifications-google-apps-scripting","text":"The framework offers a facility of alerting the user via an e-mail if the sensor readings exceed a certain pre-defined threshold. Our Google Apps Script attached to Google Sheets makes this happen.","title":"Alert Notifications: Google Apps Scripting"},{"location":"#timekeeping-public-ntp-servers","text":"Syncing internal clock with NTP server clock for timekeeping. NTP as you know stands for Network Time Protocol which is a networking protocol for clock synchronization between computer systems. Using this framework you just have to use one line of code to sync internal clock of your IoT device with NTP server time.","title":"Timekeeping: Public NTP Servers"},{"location":"APIs/","text":"APIs Our framework consists of APIs which users can use in the code as per their need. All the user will have to do is include these function in the code. So, whenever any IoT event occurs the user defined function attached to this event will be executed automatically without having the user call the function explicitly in main() or elsewhere. So, below mentioned are the APIs that users can use to get their work done . Wi-Fi void ey_init_wifi_sta(char str_ssid[], char str_pass[]) This API is used to connect to an existing Wi-Fi network. You must be having a Wi-Fi hotspot to which you want your esp to be connected. For Wi-Fi security, WPA/WPA2 on an existing Wi-Fi network is used. Since we are using WPA/WPA2 authentication mode, this function takes SSID name and SSID key of your Wi-Fi network in order to join to this Wi-Fi network. Parameters: str_ssid[] = SSID name of your Wi-Fi network str_pass[] = SSID password of your Wi-Fi network void ey_wifi_auto_reconnect(void) Your esp may be disconnected from your Wi-Fi network due to many reasons, e.g. the connected AP is restarted etc. It's the application's responsibility to do the reconnect. So , you can use this API to auto reconnect to your Wi-Fi network This API internally calls esp_wifi_connect() if your Wi-Fi STA is disconnected. Parameters: None NTP int ey_init_nvs(void); Initialize the default NVS partition. This API initialises the default NVS partition. The default NVS partition is the one that is labeled \u201cnvs\u201d in the partition table. Return: ESP_OK if storage was successfully initialized. ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages (which may happen if NVS partition was truncated) ESP_ERR_NOT_FOUND if no partition with label \u201cnvs\u201d is found in the partition table one of the error codes from the underlying flash storage driver. void ey_init_ntp(void) It is used to set the system time. It makes 10 retrys and restarts the esp if the system time is not set even after 10th try. time_t ey_sntp_get_epoch(void); This API gets the current system time and checks whether it is set or not. If it is not set then it first initializes SNTP and then tries to set the time following the method in void ey_init_ntp . it restarts the esp module and returns the current set time. Return: It returns the current set system time. char* ey_sntp_date_string(void) This API is used to get the current date and the time string. It returns the date and time through a single character array. The date and time are stored as 'YY-MM-DD HH:MM:SS' in the datestring returned by this function. Return: Returns character array storing value of system date and time in the above mentioned format. Database int ey_push_sensor_data(unsigned char mode, float sensor_value); This API is used to used push one sensor data to your database. Parameters: mode : GOOGLE_SHEET if you are using google Spreadsheets as your database. sensor_value : readings of your sensor. int x_ey_push_sensor_data(unsigned char mode, int number_of_values, ... ); This API is used to push more than one sensor data to your database. Parameters: mode : GOOGLE_SHEET , if you are using google spreadsheets as your database. number_of_values : number of values you wanted to push MQTT void ey_mqtt_start(void) This API is used to create an mqtt client handle based on the configuration and starts mqtt client with created client handle. You can set the configuration (which includes MQTT server URL and MQTT server port) in the ey_iot_config.h file Parameters: None int ey_mqtt_publish(char str_topic[], char str_data[], unsigned char qos) This API is used to send a publish message to the broker for a particular topic. Parameters: str_topic[] : array which stores the topic string. str_data[] : array which stores the payload string (set to NULL, sending empty payload message). qos : qos of publish message Return: msg_id of the publish message (for QoS 0 message_id will always be zero) on success, -1 on failure. int ey_mqtt_subscribe(char str_topic[], unsigned char qos); This API is used to subscribe the client to defined topic with defined qos. Parameters: str_topic[] : array which stores the topic string. qos : qos of subscribe message Return: msg_id of the subscribe message on success, -1 on failure. int ey_mqtt_unsubscribe(char str_topic[]); This API is used to unsubscribe the client from defined topic. Parameters: str_topic[] : array which stores the topic string. Return: msg_id of the subscribe message on success, -1 on failure.","title":"Week3"},{"location":"APIs/#apis","text":"Our framework consists of APIs which users can use in the code as per their need. All the user will have to do is include these function in the code. So, whenever any IoT event occurs the user defined function attached to this event will be executed automatically without having the user call the function explicitly in main() or elsewhere. So, below mentioned are the APIs that users can use to get their work done .","title":"APIs"},{"location":"APIs/#wi-fi","text":"void ey_init_wifi_sta(char str_ssid[], char str_pass[]) This API is used to connect to an existing Wi-Fi network. You must be having a Wi-Fi hotspot to which you want your esp to be connected. For Wi-Fi security, WPA/WPA2 on an existing Wi-Fi network is used. Since we are using WPA/WPA2 authentication mode, this function takes SSID name and SSID key of your Wi-Fi network in order to join to this Wi-Fi network.","title":"Wi-Fi"},{"location":"APIs/#parameters","text":"str_ssid[] = SSID name of your Wi-Fi network str_pass[] = SSID password of your Wi-Fi network void ey_wifi_auto_reconnect(void) Your esp may be disconnected from your Wi-Fi network due to many reasons, e.g. the connected AP is restarted etc. It's the application's responsibility to do the reconnect. So , you can use this API to auto reconnect to your Wi-Fi network This API internally calls esp_wifi_connect() if your Wi-Fi STA is disconnected.","title":"Parameters:"},{"location":"APIs/#parameters-none","text":"","title":"Parameters: None"},{"location":"APIs/#ntp","text":"int ey_init_nvs(void); Initialize the default NVS partition. This API initialises the default NVS partition. The default NVS partition is the one that is labeled \u201cnvs\u201d in the partition table.","title":"NTP"},{"location":"APIs/#return","text":"ESP_OK if storage was successfully initialized. ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages (which may happen if NVS partition was truncated) ESP_ERR_NOT_FOUND if no partition with label \u201cnvs\u201d is found in the partition table one of the error codes from the underlying flash storage driver. void ey_init_ntp(void) It is used to set the system time. It makes 10 retrys and restarts the esp if the system time is not set even after 10th try. time_t ey_sntp_get_epoch(void); This API gets the current system time and checks whether it is set or not. If it is not set then it first initializes SNTP and then tries to set the time following the method in void ey_init_ntp . it restarts the esp module and returns the current set time.","title":"Return:"},{"location":"APIs/#return_1","text":"It returns the current set system time. char* ey_sntp_date_string(void) This API is used to get the current date and the time string. It returns the date and time through a single character array. The date and time are stored as 'YY-MM-DD HH:MM:SS' in the datestring returned by this function.","title":"Return:"},{"location":"APIs/#return_2","text":"Returns character array storing value of system date and time in the above mentioned format.","title":"Return:"},{"location":"APIs/#database","text":"int ey_push_sensor_data(unsigned char mode, float sensor_value); This API is used to used push one sensor data to your database.","title":"Database"},{"location":"APIs/#parameters_1","text":"mode : GOOGLE_SHEET if you are using google Spreadsheets as your database. sensor_value : readings of your sensor. int x_ey_push_sensor_data(unsigned char mode, int number_of_values, ... ); This API is used to push more than one sensor data to your database.","title":"Parameters:"},{"location":"APIs/#parameters_2","text":"mode : GOOGLE_SHEET , if you are using google spreadsheets as your database. number_of_values : number of values you wanted to push","title":"Parameters:"},{"location":"APIs/#mqtt","text":"void ey_mqtt_start(void) This API is used to create an mqtt client handle based on the configuration and starts mqtt client with created client handle. You can set the configuration (which includes MQTT server URL and MQTT server port) in the ey_iot_config.h file","title":"MQTT"},{"location":"APIs/#parameters-none_1","text":"int ey_mqtt_publish(char str_topic[], char str_data[], unsigned char qos) This API is used to send a publish message to the broker for a particular topic.","title":"Parameters: None"},{"location":"APIs/#parameters_3","text":"str_topic[] : array which stores the topic string. str_data[] : array which stores the payload string (set to NULL, sending empty payload message). qos : qos of publish message","title":"Parameters:"},{"location":"APIs/#return_3","text":"msg_id of the publish message (for QoS 0 message_id will always be zero) on success, -1 on failure. int ey_mqtt_subscribe(char str_topic[], unsigned char qos); This API is used to subscribe the client to defined topic with defined qos.","title":"Return:"},{"location":"APIs/#parameters_4","text":"str_topic[] : array which stores the topic string. qos : qos of subscribe message","title":"Parameters:"},{"location":"APIs/#return_4","text":"msg_id of the subscribe message on success, -1 on failure. int ey_mqtt_unsubscribe(char str_topic[]); This API is used to unsubscribe the client from defined topic.","title":"Return:"},{"location":"APIs/#parameters_5","text":"str_topic[] : array which stores the topic string.","title":"Parameters:"},{"location":"APIs/#return_5","text":"msg_id of the subscribe message on success, -1 on failure.","title":"Return:"},{"location":"Example/","text":"Example In the previous sections, you have seen that our framework consists of APIs which you can use in the code as per your need. All you have to do is include these functions in your code. So, whenever any IoT event occurs the user defined function attached to this event will be executed automatically without having the user call the function explicitly in main() or elsewhere. This section consists of an example code that uses our APIs. This example pushes a data to the google Spreadsheet , performs Over-the-Air Updates using encrypted firmware stored in a Github Repo . //------------------------------------------------------------------------------ #include \"ey_iot.h\" #include \"ey_iot_config.h\" //------------------------------------------------------------------------------ #define SUB_TOPIC \"/ey/001/endpoint\" #define PUB_TOPIC \"/ey/001/server\" #define DELAY_SEC 60 //------------------------------------------------------------------------------ void init_callback(void); void my_wifi_start(void); void my_wifi_disconnect(void); void my_mqtt_rx(void); void my_mqtt_disconnect(void); void my_ota_success(void); void my_ota_fail(void); void my_task_sensor_data_logging(void *p); //------------------------------------------------------------------------------ void app_main(void){ init_callback(); ey_init_nvs(); ey_init_wifi_sta(EY_CONFIG_WIFI_SSID, EY_CONFIG_WIFI_PASS); ey_init_ntp(); ey_mqtt_start(); ey_mqtt_subscribe(SUB_TOPIC, 0); ey_populate_isp_location(); xTaskCreate(&my_task_sensor_data_logging, \"my_task_sensor_data_logging\", 8120, NULL, 10, NULL); } //------------------------------------------------------------------------------ void init_callback(void){ ey_register_callback(EY_WIFI_EVENT_STA_START, my_wifi_start); ey_register_callback(EY_WIFI_EVENT_STA_DISCONNECTED, my_wifi_disconnect); ey_register_callback(EY_MQTT_EVENT_DATA_RX, my_mqtt_rx); ey_register_callback(EY_OTA_EVENT_SUCCESS, my_ota_success); ey_register_callback(EY_OTA_EVENT_FAIL, my_ota_fail); } void my_wifi_start() { printf(\"USER: Wi-Fi Start\\n\"); } void my_wifi_disconnect() { printf(\"USER: Wi-Fi Disconnect\\n\"); ey_wifi_auto_reconnect(); } void my_mqtt_rx(){ printf(\"SUB_TOPIC: %s\\n\", ey_mqtt_sub_topic); printf(\"SUB_DATA: %s\\n\", ey_mqtt_sub_data); if(strcmp(ey_mqtt_sub_data, \"ota-start\") == 0){ printf(\"%s\\n\", \"OTA Start Command Received\"); ey_mqtt_publish(PUB_TOPIC, \"ota-start-cmd-received\", 0); printf(\"PUB_DATA: %s\\n\", \"ota-start-cmd-received\"); // Start OTA ey_ota_advanced_start(OTA_MODE_FORCED); } } void my_mqtt_disconnect(){ printf(\"USER: MQTT Disconnect\\n\"); ey_wifi_auto_reconnect(); } void my_ota_success(){ printf(\"USER: OTA Success\\n\"); ey_mqtt_publish(PUB_TOPIC, \"ota-success\", 0); vTaskDelay(2000 / portTICK_PERIOD_MS); esp_restart(); } void my_ota_fail(){ printf(\"USER: OTA Fail\\n\"); } void my_task_sensor_data_logging(void *p){ long unsigned int start_time = 0, current_time = 0; char sensor_data = 99; start_time = ey_sntp_get_epoch(); while(1){ current_time = ey_sntp_get_epoch(); if((current_time - start_time) >= 10){ // Print Time printf(WHT \"Time: \" RESET); printf(CYN \"%s\\n\" RESET, ey_sntp_date_string()); // Print ISP Location if(ey_iot.isp_loc_status == 1){ printf(WHT \"Location: \" RESET); printf(MAG \"%s, %s, %s\\n\" RESET, ey_iot.isp_city, ey_iot.isp_regionName, ey_iot.isp_country); } // Print Sensor printf(WHT \"Sensor: \" RESET); printf(YEL \"%d\\n\" RESET,sensor_data); ey_push_sensor_data(GOOGLE_SHEET, sensor_data); printf(\"\\n\"); sensor_data--; if(sensor_data == 0){ sensor_data = 99; } start_time = current_time; } } } //------------------------------------------------------------------------------ //------------------------------------------------------------------------------ And below is the demo video that shows the whole working of the above code.","title":"Example"},{"location":"Example/#example","text":"In the previous sections, you have seen that our framework consists of APIs which you can use in the code as per your need. All you have to do is include these functions in your code. So, whenever any IoT event occurs the user defined function attached to this event will be executed automatically without having the user call the function explicitly in main() or elsewhere. This section consists of an example code that uses our APIs. This example pushes a data to the google Spreadsheet , performs Over-the-Air Updates using encrypted firmware stored in a Github Repo . //------------------------------------------------------------------------------ #include \"ey_iot.h\" #include \"ey_iot_config.h\" //------------------------------------------------------------------------------ #define SUB_TOPIC \"/ey/001/endpoint\" #define PUB_TOPIC \"/ey/001/server\" #define DELAY_SEC 60 //------------------------------------------------------------------------------ void init_callback(void); void my_wifi_start(void); void my_wifi_disconnect(void); void my_mqtt_rx(void); void my_mqtt_disconnect(void); void my_ota_success(void); void my_ota_fail(void); void my_task_sensor_data_logging(void *p); //------------------------------------------------------------------------------ void app_main(void){ init_callback(); ey_init_nvs(); ey_init_wifi_sta(EY_CONFIG_WIFI_SSID, EY_CONFIG_WIFI_PASS); ey_init_ntp(); ey_mqtt_start(); ey_mqtt_subscribe(SUB_TOPIC, 0); ey_populate_isp_location(); xTaskCreate(&my_task_sensor_data_logging, \"my_task_sensor_data_logging\", 8120, NULL, 10, NULL); } //------------------------------------------------------------------------------ void init_callback(void){ ey_register_callback(EY_WIFI_EVENT_STA_START, my_wifi_start); ey_register_callback(EY_WIFI_EVENT_STA_DISCONNECTED, my_wifi_disconnect); ey_register_callback(EY_MQTT_EVENT_DATA_RX, my_mqtt_rx); ey_register_callback(EY_OTA_EVENT_SUCCESS, my_ota_success); ey_register_callback(EY_OTA_EVENT_FAIL, my_ota_fail); } void my_wifi_start() { printf(\"USER: Wi-Fi Start\\n\"); } void my_wifi_disconnect() { printf(\"USER: Wi-Fi Disconnect\\n\"); ey_wifi_auto_reconnect(); } void my_mqtt_rx(){ printf(\"SUB_TOPIC: %s\\n\", ey_mqtt_sub_topic); printf(\"SUB_DATA: %s\\n\", ey_mqtt_sub_data); if(strcmp(ey_mqtt_sub_data, \"ota-start\") == 0){ printf(\"%s\\n\", \"OTA Start Command Received\"); ey_mqtt_publish(PUB_TOPIC, \"ota-start-cmd-received\", 0); printf(\"PUB_DATA: %s\\n\", \"ota-start-cmd-received\"); // Start OTA ey_ota_advanced_start(OTA_MODE_FORCED); } } void my_mqtt_disconnect(){ printf(\"USER: MQTT Disconnect\\n\"); ey_wifi_auto_reconnect(); } void my_ota_success(){ printf(\"USER: OTA Success\\n\"); ey_mqtt_publish(PUB_TOPIC, \"ota-success\", 0); vTaskDelay(2000 / portTICK_PERIOD_MS); esp_restart(); } void my_ota_fail(){ printf(\"USER: OTA Fail\\n\"); } void my_task_sensor_data_logging(void *p){ long unsigned int start_time = 0, current_time = 0; char sensor_data = 99; start_time = ey_sntp_get_epoch(); while(1){ current_time = ey_sntp_get_epoch(); if((current_time - start_time) >= 10){ // Print Time printf(WHT \"Time: \" RESET); printf(CYN \"%s\\n\" RESET, ey_sntp_date_string()); // Print ISP Location if(ey_iot.isp_loc_status == 1){ printf(WHT \"Location: \" RESET); printf(MAG \"%s, %s, %s\\n\" RESET, ey_iot.isp_city, ey_iot.isp_regionName, ey_iot.isp_country); } // Print Sensor printf(WHT \"Sensor: \" RESET); printf(YEL \"%d\\n\" RESET,sensor_data); ey_push_sensor_data(GOOGLE_SHEET, sensor_data); printf(\"\\n\"); sensor_data--; if(sensor_data == 0){ sensor_data = 99; } start_time = current_time; } } } //------------------------------------------------------------------------------ //------------------------------------------------------------------------------ And below is the demo video that shows the whole working of the above code.","title":"Example"},{"location":"MQTT/","text":"MQTT Create a new project and add the below code to the main.c file. //------------------------------------------------------------------------------ #include \"ey_iot.h\" #include \"ey_iot_config.h\" //------------------------------------------------------------------------------ #define SUB_TOPIC \"/tih/chat/group\" #define PUB_TOPIC \"/tih/chat/my\" #define DELAY_SEC 60 //------------------------------------------------------------------------------ void init_callback(void); void my_wifi_start(void); void my_wifi_disconnect(void); void my_mqtt_rx(void); void my_mqtt_disconnect(void); //------------------------------------------------------------------------------ void app_main(void){ init_callback(); ey_init_nvs(); ey_init_wifi_sta(EY_CONFIG_WIFI_SSID, EY_CONFIG_WIFI_PASS); ey_mqtt_start(); ey_mqtt_subscribe(SUB_TOPIC, 0); } //------------------------------------------------------------------------------ void init_callback(void){ ey_register_callback(EY_WIFI_EVENT_STA_START, my_wifi_start); ey_register_callback(EY_WIFI_EVENT_STA_DISCONNECTED, my_wifi_disconnect); ey_register_callback(EY_MQTT_EVENT_DATA_RX, my_mqtt_rx); } void my_wifi_start() { printf(\"USER: Wi-Fi Start\\n\"); } void my_wifi_disconnect() { printf(\"USER: Wi-Fi Disconnect\\n\"); ey_wifi_auto_reconnect(); } void my_mqtt_rx(){ printf(\"SUB_TOPIC: %s\\n\", ey_mqtt_sub_topic); printf(\"SUB_DATA: %s\\n\", ey_mqtt_sub_data); ey_mqtt_publish(PUB_TOPIC, \"Welcome Home!!\", 0); printf(\"PUB_DATA: %s\\n\", \"Sent message\"); } void my_mqtt_disconnect(){ printf(\"USER: MQTT Disconnect\\n\"); ey_wifi_auto_reconnect(); } Refer to the APIs section to know about the MQTT APIs used in the above code. Copy and paste the below code in the ey_iot_config.h file: #ifndef __EY_IOT_CONFIG_H__ #define __EY_IOT_CONFIG_H__ //--------- Wi-Fi --------- #define EY_CONFIG_WIFI_SSID \"my-wifi-ssid\" #define EY_CONFIG_WIFI_PASS \"my-wifi-password\" //--------- MQTT --------- #define EY_CONFIG_MQTT_SERVER_URL \"mqtt://broker.emqx.io\" #define EY_CONFIG_MQTT_SERVER_PORT 1883 #define EY_SUB_TOPIC_LEN 100 #define EY_SUB_DATA_LEN 100 //--------- Encryption --------- #define EY_ENCRYP_XOR_KEY 'e' //--------- NTP --------- #define EY_NTP_SERVER \"pool.ntp.org\" #define EY_NTP_TIMEZONE \"UTC-5:30\" //--------- Database --------- #define SPREADSHEET_ID \"unique-spreadsheet-id\" #endif Build the project and flash the code on the ESP32 and open the serial monitor in VS Code by clicking on ESP-IDF Monitor device button. Open the MQTT X desktop MQTT client which you downloaded and installed earlier. Click on New Connection . Give name to the connection and in the host field select mqtt:// and add the address of the broker link as broker.emqx.io . Make sure the port is 1883 . Click on Connect . Click on New Subscription , add the topic on which ESP32 is going to publish the data. Make sure the QoS is selected as 0. Click on Confirm. Add the topic on which ESP32 is subscribed in the field. Whatever message you publish on this topic, ESP32 will receive.","title":"MQTT"},{"location":"MQTT/#mqtt","text":"Create a new project and add the below code to the main.c file. //------------------------------------------------------------------------------ #include \"ey_iot.h\" #include \"ey_iot_config.h\" //------------------------------------------------------------------------------ #define SUB_TOPIC \"/tih/chat/group\" #define PUB_TOPIC \"/tih/chat/my\" #define DELAY_SEC 60 //------------------------------------------------------------------------------ void init_callback(void); void my_wifi_start(void); void my_wifi_disconnect(void); void my_mqtt_rx(void); void my_mqtt_disconnect(void); //------------------------------------------------------------------------------ void app_main(void){ init_callback(); ey_init_nvs(); ey_init_wifi_sta(EY_CONFIG_WIFI_SSID, EY_CONFIG_WIFI_PASS); ey_mqtt_start(); ey_mqtt_subscribe(SUB_TOPIC, 0); } //------------------------------------------------------------------------------ void init_callback(void){ ey_register_callback(EY_WIFI_EVENT_STA_START, my_wifi_start); ey_register_callback(EY_WIFI_EVENT_STA_DISCONNECTED, my_wifi_disconnect); ey_register_callback(EY_MQTT_EVENT_DATA_RX, my_mqtt_rx); } void my_wifi_start() { printf(\"USER: Wi-Fi Start\\n\"); } void my_wifi_disconnect() { printf(\"USER: Wi-Fi Disconnect\\n\"); ey_wifi_auto_reconnect(); } void my_mqtt_rx(){ printf(\"SUB_TOPIC: %s\\n\", ey_mqtt_sub_topic); printf(\"SUB_DATA: %s\\n\", ey_mqtt_sub_data); ey_mqtt_publish(PUB_TOPIC, \"Welcome Home!!\", 0); printf(\"PUB_DATA: %s\\n\", \"Sent message\"); } void my_mqtt_disconnect(){ printf(\"USER: MQTT Disconnect\\n\"); ey_wifi_auto_reconnect(); } Refer to the APIs section to know about the MQTT APIs used in the above code. Copy and paste the below code in the ey_iot_config.h file: #ifndef __EY_IOT_CONFIG_H__ #define __EY_IOT_CONFIG_H__ //--------- Wi-Fi --------- #define EY_CONFIG_WIFI_SSID \"my-wifi-ssid\" #define EY_CONFIG_WIFI_PASS \"my-wifi-password\" //--------- MQTT --------- #define EY_CONFIG_MQTT_SERVER_URL \"mqtt://broker.emqx.io\" #define EY_CONFIG_MQTT_SERVER_PORT 1883 #define EY_SUB_TOPIC_LEN 100 #define EY_SUB_DATA_LEN 100 //--------- Encryption --------- #define EY_ENCRYP_XOR_KEY 'e' //--------- NTP --------- #define EY_NTP_SERVER \"pool.ntp.org\" #define EY_NTP_TIMEZONE \"UTC-5:30\" //--------- Database --------- #define SPREADSHEET_ID \"unique-spreadsheet-id\" #endif Build the project and flash the code on the ESP32 and open the serial monitor in VS Code by clicking on ESP-IDF Monitor device button. Open the MQTT X desktop MQTT client which you downloaded and installed earlier. Click on New Connection . Give name to the connection and in the host field select mqtt:// and add the address of the broker link as broker.emqx.io . Make sure the port is 1883 . Click on Connect . Click on New Subscription , add the topic on which ESP32 is going to publish the data. Make sure the QoS is selected as 0. Click on Confirm. Add the topic on which ESP32 is subscribed in the field. Whatever message you publish on this topic, ESP32 will receive.","title":"MQTT"},{"location":"Requirements/","text":"Tools required Below is the list of required tools for this workshop and step-by-step process of how to use them. NOTE: Username or System name must not have space. For e.g., IIT Bombay is not allowed and IIT_Bombay is allowed. If the System name contains a space, then kindly create a new login account on the system OR install all the software in the drive apart from C , maybe D or E . System must have at least one drive of min. 100 GB should be available on system apart from C drive. Following software are required to be installed: 1. Visual Studio Code Download VSCodeSetup-x64-1.68.1.exe from this link . Install the software. If you already have VS Code installed on the system, make sure its updated to v1.68.1 . 2. Espressif extension in VS Code Follow this link , it mentions step-by-step process to install and configure the extension successfully. You can skip the steps 5 and 6. In step 10 Select the ESP-IDF version as v4.2.3 (release version) from the options. Let the directory path for ESP-IDF container and ESP-IDF tools be as default, do not change it. Ensure that the path does not have a space, as mentioned in Note at the top. If it does have, then change the directory paths to some location in D or E drive. Now, sit back and relax while the installation is proceeding. Based on the network speed, it might take around 30 to 40 mins for installation to complete. Skip the steps 12, 13 and 15. You should see the message as in step 14 if the installation was successful. 3. MQTT X MQTT X is desktop MQTT client open sourced by EMQ. Click here to download the MQTT X . Great! We are now ready to use these tools for learning something new","title":"Requirements"},{"location":"Requirements/#tools-required","text":"Below is the list of required tools for this workshop and step-by-step process of how to use them.","title":"Tools required"},{"location":"Requirements/#note","text":"Username or System name must not have space. For e.g., IIT Bombay is not allowed and IIT_Bombay is allowed. If the System name contains a space, then kindly create a new login account on the system OR install all the software in the drive apart from C , maybe D or E . System must have at least one drive of min. 100 GB should be available on system apart from C drive. Following software are required to be installed:","title":"NOTE:"},{"location":"Requirements/#1-visual-studio-code","text":"Download VSCodeSetup-x64-1.68.1.exe from this link . Install the software. If you already have VS Code installed on the system, make sure its updated to v1.68.1 .","title":"1. Visual Studio Code"},{"location":"Requirements/#2-espressif-extension-in-vs-code","text":"Follow this link , it mentions step-by-step process to install and configure the extension successfully. You can skip the steps 5 and 6. In step 10 Select the ESP-IDF version as v4.2.3 (release version) from the options. Let the directory path for ESP-IDF container and ESP-IDF tools be as default, do not change it. Ensure that the path does not have a space, as mentioned in Note at the top. If it does have, then change the directory paths to some location in D or E drive. Now, sit back and relax while the installation is proceeding. Based on the network speed, it might take around 30 to 40 mins for installation to complete. Skip the steps 12, 13 and 15. You should see the message as in step 14 if the installation was successful.","title":"2. Espressif extension in VS Code"},{"location":"Requirements/#3-mqtt-x","text":"MQTT X is desktop MQTT client open sourced by EMQ. Click here to download the MQTT X . Great! We are now ready to use these tools for learning something new","title":"3. MQTT X"},{"location":"Spreadsheet/","text":"HTTP In this section, we will be logging/storing dummy sensor data in the google spreadsheets and sending alert notification through gmail using HTTP messaging protocol. First of all, users need a google account in order to proceed. If you do not have it already, kindly create one. Open Google Sheets: Google Sheets Create a blank sheet and name it as per your choice. Here we have named it as Sensor_1 . Note the difference between the complete spreadsheet name which is ey_IoT_googleDb in this case and individual sheet name which is Sensor_1 . Write headings for two columns, Timestamp , value . Timestamp indicates the date and time at which sensor readings will be updated in the subsequent columns. This column will be updated automatically when a reading is send to the sheet via an HTTP GET request. value is the reading itself. We can have multiple values columns for multiple sensor readings which is explained further in this document. Go to Tools -> Script editor . to open a new tab with the code editor window. This will open a new tab in your browser, which is the Google Apps Script editor window: Here, we will be writing some script (see https://developers.google.com/apps-script) for extending our sheet\u2019s functionality. The script will be processing HTTP GET (more at https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) requests and forwarding the data passed as parameters to the sheet, and plots live sensor readings on chart. By default, it\u2019ll open with a single Google Script file ( code.gs ) and a default code block, myFunction() : For this project, you will have two files: Code.gs and Index.html . Copy and paste below mentioned code in Code.gs file. function doGet(e){ // open the spreadsheet var ss = SpreadsheetApp.getActive(); // use the 'id' parameter to differentiate between sheet var sheet = ss.getSheetByName(e.parameter[\"id\"]); // extract headers // getRange accepts row, col, number_of_rows and num_of_cols as argument // getLastColumn returns the position of the last column that has content var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0]; // store the position of the last row var lastRow = sheet.getLastRow(); var cell = sheet.getRange('a1'); var col = 0; var d = new Date(); for (i in headers) { // loop through the headers and if a parameter name matches the header name insert the value if (headers[i] == \"Timestamp\") { val = d.toDateString() + \", \" + d.toLocaleTimeString(); } else { val = e.parameter[headers[i]]; } // append data to the last row cell.offset(lastRow, col).setValue(val); col++; } //Checks the last logged data in the sheet, sends email if data greater is than threshold var sh = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet(); var lastRow = sh.getLastRow(); var lastCol = sh.getLastColumn(); var data = sh.getRange(lastRow, lastCol).getValue(); if(data > 100) //set your threshold here { var sheet_e = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Emails\"); let startRow_e = 2; // First row of data to process const dataRange_e = sheet_e.getRange(startRow_e, 1, sheet_e.getLastRow()-1, 2); // Fetch values for each row in the Range. const data_e = dataRange_e.getValues(); for (let row_e of data_e) { const emailAddress = row_e[0]; // First column Logger.log(emailAddress) var message = \"Warning! Temperature has crossed the threshold value. Right now, the temperature is \" + data + \" \\n\" ; let subject = 'Sending emails from a Weather Monitoring System'; //Send emails to emailAddresses which are presents in First column MailApp.sendEmail(emailAddress, subject, message); } } } Changes to be made in Code.gs: Change threshold value as per your requirement. Create a sheet named \"Emails\" in the same spreadsheet and add the mail ids on which you want to send the email. The text message, which will be mailed to the specified mail id when threshold readings are violated, can also be altered as per user's requirement. After all editing in the code, Go to Deploy -> New Deployment . You will get dialog box as below. Click on Settings button and select Web app . Make the app accessible to Anyone . Execute the app as Me and click on Deploy . Then Authorization required dialog box will appear. Click on Review Permissions . Choose your Google account. Then Google will asks for verification and you will be getting a window like given below. So click on Advanced . Scroll down and click on Go to ey_IoT_script (unsafe) . Then click on Allow . You will get a dialog box like this below. Copy the link that is provided to you, at this step , and click on OK The link will look like this, https://script.google.com/macros/s/{your-sheet-id}/exec In the previous code, I mentioned about parameters. I am using the parameter id to differentiate between sheets. At the same time, if a parameter name matches with a header name, the script would be writing to that column. The header in my sheet, other than Timestamp is value . So would be the parameters. A sample URL containing the query parameters is, https://script.google.com/macros/s/{your-sheet-id}/exec?id=Sensor_1&value=100 Note : Headers in the spreadsheet ( value in this case) and the query parameters in your URL must be same. Also id is nothing but name of the sheet which in this case is Sensor_1. When the URL is pasted in the address bar of the browser and invoked, Something happened. Maybe, check our sheet. Whoa! . You have successfully added a data in the sheet. What if you wanted to upload more than one sensor readings to spreadsheet? In the tutorial above, you have come across to upload one sensor reading named 'value' to the spreadsheet. Now if you wanted to upload more than one sensor readings to the spreadsheet, what would you do? Let's say you wanted to upload 3 sensor readings named value1 , value2 , value3 to the spreadsheet. Just follow below mentioned steps. Step 1 : In the same spreadsheet, make 3 headers in your sheet other than Timestamp as value1 , value2 , value3 . Step 2 : Code.gs and Index.html will be same. All procedure will be same as we did above. Step 3 : Now recall the URL that you get when you published your script and deployed it as web app. It was something like this:- https://script.google.com/macros/s/{your-sheet-id}/exec In the code.gs , I mentioned about parameters. I am using the parameter id to differentiate between sheets. At the same time, if a parameter name matches with a header name, the script would be writing to that column. The header in my sheet, other than Timestamp is value1 , value2 , value3 . So would be the parameters. A sample URL containing the query parameters is, https://script.google.com/macros/s/{your-sheet-id}/exec?id=Sensor_1&value1=100&value2=50&value3=100 Note : Headers in the spreadsheet ( value1 , value2 , value3 in this case) should be same as query parameters in your URL. When the URL is pasted in the address bar of the browser and invoked, Something happened. Maybe, we should check our sheet? Whoa! . You have successfully uploaded 3 sensors readings on the sheet. So in this way, you can upload as many sensor readings you want to the spreadsheet by just changing the headers in the sheet and some query parameters in the URL. Sending data from ESP32 to database Creating New Project Open VS Code and press Ctrl+Shift+P . Type ESP-IDF: New Project and click on enter. Give the project name in the project name field, browse the path of the project to the directory where you want to save the project, choose ESP-IDF board as Custom Board, choose ESP-IDF target as ESP32 module and click on choose template. Then click on last option template-app . Finally click on Create project using template template-app . This will open a project in a new window. Open the main.c file located inside the main directory. Copy and paste below mentioned code in file. In the previous sections, you have seen that our framework consists of APIs which you can use in the code as per your need. All you have to do is include these functions in your code. So, whenever any IoT event occurs the user defined function attached to this event will be executed automatically without having the user call the function explicitly in main() or elsewhere. //------------------------------------------------------------------------------ #include \"ey_iot.c\" #include \"ey_iot_config.h\" //------------------------------------------------------------------------------ void init_callback(void); void my_wifi_start(void); void my_wifi_disconnect(void); void my_task_sensor_data_logging(void *p); //------------------------------------------------------------------------------ void app_main(void){ init_callback(); ey_init_nvs(); ey_init_wifi_sta(EY_CONFIG_WIFI_SSID, EY_CONFIG_WIFI_PASS); xTaskCreate(&my_task_sensor_data_logging, \"my_task_sensor_data_logging\", 8120, NULL, 10, NULL); } //------------------------------------------------------------------------------ void init_callback(void){ ey_register_callback(EY_WIFI_EVENT_STA_START, my_wifi_start); ey_register_callback(EY_WIFI_EVENT_STA_DISCONNECTED, my_wifi_disconnect); } void my_wifi_start() { printf(\"USER: Wi-Fi Start\\n\"); } void my_wifi_disconnect() { printf(\"USER: Wi-Fi Disconnect\\n\"); ey_wifi_auto_reconnect(); } void my_task_sensor_data_logging(void *p){ char sensor_data = 99; while(1){ // Print Sensor printf(WHT \"Sensor: \" RESET); printf(YEL \"%d\\n\" RESET,sensor_data); ey_push_sensor_data(GOOGLE_SHEET, sensor_data); printf(\"\\n\"); sensor_data--; if(sensor_data == 0) { sensor_data = 99; } } } //------------------------------------------------------------------------------ Configuring e-Yantra IoT Framework ey_iot_config.h file present in the framework is used to configure various services offered by the framework. Click here to download the files. Following is a sample of ey_iot_config.h . User can change it according to their usage. #ifndef __EY_IOT_CONFIG_H__ #define __EY_IOT_CONFIG_H__ //--------- Wi-Fi --------- #define EY_CONFIG_WIFI_SSID \"my-wifi-ssid\" #define EY_CONFIG_WIFI_PASS \"my-wifi-password\" //--------- Encryption --------- #define EY_ENCRYP_XOR_KEY 'e' //--------- NTP --------- #define EY_NTP_SERVER \"pool.ntp.org\" #define EY_NTP_TIMEZONE \"UTC-5:30\" //--------- Database --------- #define SPREADSHEET_ID \"unique-spreadsheet-id\" #endif Replace your \"my-wifi-ssid\" & \"my-wifi-password\" with your wifi ssid and password and replace the Spreadsheet ID in place of \"unique-spreadsheet-id\" with the deployment ID. Flashing the code on ESP32 Click on ESP-IDF Build Project button located at the bottom of the VS Code to build the project. To Flash the code on ESP 32, click on the ESP-IDF Flash device button. Note : Make sure you press boot button on ESP32 while flashing the code on ESP32. Click on ESP-IDF Monitor device to see the output on the terminal. Simultaneously check the spreadsheet whether the data is getting logged in the sheeet or not and check your gmail whether you are getting alert notification or not depending upon the threshold you had put in the app script.","title":"HTTP"},{"location":"Spreadsheet/#http","text":"In this section, we will be logging/storing dummy sensor data in the google spreadsheets and sending alert notification through gmail using HTTP messaging protocol. First of all, users need a google account in order to proceed. If you do not have it already, kindly create one. Open Google Sheets: Google Sheets Create a blank sheet and name it as per your choice. Here we have named it as Sensor_1 . Note the difference between the complete spreadsheet name which is ey_IoT_googleDb in this case and individual sheet name which is Sensor_1 . Write headings for two columns, Timestamp , value . Timestamp indicates the date and time at which sensor readings will be updated in the subsequent columns. This column will be updated automatically when a reading is send to the sheet via an HTTP GET request. value is the reading itself. We can have multiple values columns for multiple sensor readings which is explained further in this document. Go to Tools -> Script editor . to open a new tab with the code editor window. This will open a new tab in your browser, which is the Google Apps Script editor window: Here, we will be writing some script (see https://developers.google.com/apps-script) for extending our sheet\u2019s functionality. The script will be processing HTTP GET (more at https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) requests and forwarding the data passed as parameters to the sheet, and plots live sensor readings on chart. By default, it\u2019ll open with a single Google Script file ( code.gs ) and a default code block, myFunction() : For this project, you will have two files: Code.gs and Index.html . Copy and paste below mentioned code in Code.gs file. function doGet(e){ // open the spreadsheet var ss = SpreadsheetApp.getActive(); // use the 'id' parameter to differentiate between sheet var sheet = ss.getSheetByName(e.parameter[\"id\"]); // extract headers // getRange accepts row, col, number_of_rows and num_of_cols as argument // getLastColumn returns the position of the last column that has content var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0]; // store the position of the last row var lastRow = sheet.getLastRow(); var cell = sheet.getRange('a1'); var col = 0; var d = new Date(); for (i in headers) { // loop through the headers and if a parameter name matches the header name insert the value if (headers[i] == \"Timestamp\") { val = d.toDateString() + \", \" + d.toLocaleTimeString(); } else { val = e.parameter[headers[i]]; } // append data to the last row cell.offset(lastRow, col).setValue(val); col++; } //Checks the last logged data in the sheet, sends email if data greater is than threshold var sh = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet(); var lastRow = sh.getLastRow(); var lastCol = sh.getLastColumn(); var data = sh.getRange(lastRow, lastCol).getValue(); if(data > 100) //set your threshold here { var sheet_e = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Emails\"); let startRow_e = 2; // First row of data to process const dataRange_e = sheet_e.getRange(startRow_e, 1, sheet_e.getLastRow()-1, 2); // Fetch values for each row in the Range. const data_e = dataRange_e.getValues(); for (let row_e of data_e) { const emailAddress = row_e[0]; // First column Logger.log(emailAddress) var message = \"Warning! Temperature has crossed the threshold value. Right now, the temperature is \" + data + \" \\n\" ; let subject = 'Sending emails from a Weather Monitoring System'; //Send emails to emailAddresses which are presents in First column MailApp.sendEmail(emailAddress, subject, message); } } }","title":"HTTP"},{"location":"Spreadsheet/#changes-to-be-made-in-codegs","text":"Change threshold value as per your requirement. Create a sheet named \"Emails\" in the same spreadsheet and add the mail ids on which you want to send the email. The text message, which will be mailed to the specified mail id when threshold readings are violated, can also be altered as per user's requirement. After all editing in the code, Go to Deploy -> New Deployment . You will get dialog box as below. Click on Settings button and select Web app . Make the app accessible to Anyone . Execute the app as Me and click on Deploy . Then Authorization required dialog box will appear. Click on Review Permissions . Choose your Google account. Then Google will asks for verification and you will be getting a window like given below. So click on Advanced . Scroll down and click on Go to ey_IoT_script (unsafe) . Then click on Allow . You will get a dialog box like this below. Copy the link that is provided to you, at this step , and click on OK The link will look like this, https://script.google.com/macros/s/{your-sheet-id}/exec In the previous code, I mentioned about parameters. I am using the parameter id to differentiate between sheets. At the same time, if a parameter name matches with a header name, the script would be writing to that column. The header in my sheet, other than Timestamp is value . So would be the parameters. A sample URL containing the query parameters is, https://script.google.com/macros/s/{your-sheet-id}/exec?id=Sensor_1&value=100 Note : Headers in the spreadsheet ( value in this case) and the query parameters in your URL must be same. Also id is nothing but name of the sheet which in this case is Sensor_1. When the URL is pasted in the address bar of the browser and invoked, Something happened. Maybe, check our sheet. Whoa! . You have successfully added a data in the sheet.","title":"Changes to be made in Code.gs:"},{"location":"Spreadsheet/#what-if-you-wanted-to-upload-more-than-one-sensor-readings-to-spreadsheet","text":"In the tutorial above, you have come across to upload one sensor reading named 'value' to the spreadsheet. Now if you wanted to upload more than one sensor readings to the spreadsheet, what would you do? Let's say you wanted to upload 3 sensor readings named value1 , value2 , value3 to the spreadsheet. Just follow below mentioned steps. Step 1 : In the same spreadsheet, make 3 headers in your sheet other than Timestamp as value1 , value2 , value3 . Step 2 : Code.gs and Index.html will be same. All procedure will be same as we did above. Step 3 : Now recall the URL that you get when you published your script and deployed it as web app. It was something like this:- https://script.google.com/macros/s/{your-sheet-id}/exec In the code.gs , I mentioned about parameters. I am using the parameter id to differentiate between sheets. At the same time, if a parameter name matches with a header name, the script would be writing to that column. The header in my sheet, other than Timestamp is value1 , value2 , value3 . So would be the parameters. A sample URL containing the query parameters is, https://script.google.com/macros/s/{your-sheet-id}/exec?id=Sensor_1&value1=100&value2=50&value3=100 Note : Headers in the spreadsheet ( value1 , value2 , value3 in this case) should be same as query parameters in your URL. When the URL is pasted in the address bar of the browser and invoked, Something happened. Maybe, we should check our sheet? Whoa! . You have successfully uploaded 3 sensors readings on the sheet. So in this way, you can upload as many sensor readings you want to the spreadsheet by just changing the headers in the sheet and some query parameters in the URL.","title":"What if you wanted to upload more than one sensor readings to spreadsheet?"},{"location":"Spreadsheet/#sending-data-from-esp32-to-database","text":"","title":"Sending data from ESP32 to database"},{"location":"Spreadsheet/#creating-new-project","text":"Open VS Code and press Ctrl+Shift+P . Type ESP-IDF: New Project and click on enter. Give the project name in the project name field, browse the path of the project to the directory where you want to save the project, choose ESP-IDF board as Custom Board, choose ESP-IDF target as ESP32 module and click on choose template. Then click on last option template-app . Finally click on Create project using template template-app . This will open a project in a new window. Open the main.c file located inside the main directory. Copy and paste below mentioned code in file. In the previous sections, you have seen that our framework consists of APIs which you can use in the code as per your need. All you have to do is include these functions in your code. So, whenever any IoT event occurs the user defined function attached to this event will be executed automatically without having the user call the function explicitly in main() or elsewhere. //------------------------------------------------------------------------------ #include \"ey_iot.c\" #include \"ey_iot_config.h\" //------------------------------------------------------------------------------ void init_callback(void); void my_wifi_start(void); void my_wifi_disconnect(void); void my_task_sensor_data_logging(void *p); //------------------------------------------------------------------------------ void app_main(void){ init_callback(); ey_init_nvs(); ey_init_wifi_sta(EY_CONFIG_WIFI_SSID, EY_CONFIG_WIFI_PASS); xTaskCreate(&my_task_sensor_data_logging, \"my_task_sensor_data_logging\", 8120, NULL, 10, NULL); } //------------------------------------------------------------------------------ void init_callback(void){ ey_register_callback(EY_WIFI_EVENT_STA_START, my_wifi_start); ey_register_callback(EY_WIFI_EVENT_STA_DISCONNECTED, my_wifi_disconnect); } void my_wifi_start() { printf(\"USER: Wi-Fi Start\\n\"); } void my_wifi_disconnect() { printf(\"USER: Wi-Fi Disconnect\\n\"); ey_wifi_auto_reconnect(); } void my_task_sensor_data_logging(void *p){ char sensor_data = 99; while(1){ // Print Sensor printf(WHT \"Sensor: \" RESET); printf(YEL \"%d\\n\" RESET,sensor_data); ey_push_sensor_data(GOOGLE_SHEET, sensor_data); printf(\"\\n\"); sensor_data--; if(sensor_data == 0) { sensor_data = 99; } } } //------------------------------------------------------------------------------","title":"Creating New Project"},{"location":"Spreadsheet/#configuring-e-yantra-iot-framework","text":"ey_iot_config.h file present in the framework is used to configure various services offered by the framework. Click here to download the files. Following is a sample of ey_iot_config.h . User can change it according to their usage. #ifndef __EY_IOT_CONFIG_H__ #define __EY_IOT_CONFIG_H__ //--------- Wi-Fi --------- #define EY_CONFIG_WIFI_SSID \"my-wifi-ssid\" #define EY_CONFIG_WIFI_PASS \"my-wifi-password\" //--------- Encryption --------- #define EY_ENCRYP_XOR_KEY 'e' //--------- NTP --------- #define EY_NTP_SERVER \"pool.ntp.org\" #define EY_NTP_TIMEZONE \"UTC-5:30\" //--------- Database --------- #define SPREADSHEET_ID \"unique-spreadsheet-id\" #endif Replace your \"my-wifi-ssid\" & \"my-wifi-password\" with your wifi ssid and password and replace the Spreadsheet ID in place of \"unique-spreadsheet-id\" with the deployment ID.","title":"Configuring e-Yantra IoT Framework"},{"location":"Spreadsheet/#flashing-the-code-on-esp32","text":"Click on ESP-IDF Build Project button located at the bottom of the VS Code to build the project. To Flash the code on ESP 32, click on the ESP-IDF Flash device button. Note : Make sure you press boot button on ESP32 while flashing the code on ESP32. Click on ESP-IDF Monitor device to see the output on the terminal. Simultaneously check the spreadsheet whether the data is getting logged in the sheeet or not and check your gmail whether you are getting alert notification or not depending upon the threshold you had put in the app script.","title":"Flashing the code on ESP32"},{"location":"config/","text":"Configuring e-Yantra IoT Framework ey_iot_config.h file present in the framework is used to configure various services offered by the framework. Following is a sample of ey_iot_config.h . User can change it according to their usage. #ifndef __EY_IOT_CONFIG_H__ #define __EY_IOT_CONFIG_H__ //--------- Wi-Fi --------- #define EY_CONFIG_WIFI_SSID \"my-wifi-ssid\" #define EY_CONFIG_WIFI_PASS \"my-wifi-password\" //--------- MQTT --------- #define EY_CONFIG_MQTT_SERVER_URL \"mqtt://broker.mqttdashboard.com\" #define EY_CONFIG_MQTT_SERVER_PORT 1883 #define EY_SUB_TOPIC_LEN 100 #define EY_SUB_DATA_LEN 100 //--------- Encryption --------- #define EY_ENCRYP_XOR_KEY 'e' //--------- NTP --------- #define EY_NTP_SERVER \"pool.ntp.org\" #define EY_NTP_TIMEZONE \"UTC-5:30\" //--------- OTA --------- #define EY_REMOTE_OTA_URL \"https://raw.githubusercontent.com/username/reponame/master/hello-world.bin\" #define EY_REMOTE_OTA_TIMEOUT_MS 60000 //--------- Database --------- #define SPREADSHEET_ID \"unique-spreadsheet-id\" #endif /* __EY_IOT_CONFIG_H__ */","title":"Configuring e-Yantra IoT Framework"},{"location":"config/#configuring-e-yantra-iot-framework","text":"ey_iot_config.h file present in the framework is used to configure various services offered by the framework. Following is a sample of ey_iot_config.h . User can change it according to their usage. #ifndef __EY_IOT_CONFIG_H__ #define __EY_IOT_CONFIG_H__ //--------- Wi-Fi --------- #define EY_CONFIG_WIFI_SSID \"my-wifi-ssid\" #define EY_CONFIG_WIFI_PASS \"my-wifi-password\" //--------- MQTT --------- #define EY_CONFIG_MQTT_SERVER_URL \"mqtt://broker.mqttdashboard.com\" #define EY_CONFIG_MQTT_SERVER_PORT 1883 #define EY_SUB_TOPIC_LEN 100 #define EY_SUB_DATA_LEN 100 //--------- Encryption --------- #define EY_ENCRYP_XOR_KEY 'e' //--------- NTP --------- #define EY_NTP_SERVER \"pool.ntp.org\" #define EY_NTP_TIMEZONE \"UTC-5:30\" //--------- OTA --------- #define EY_REMOTE_OTA_URL \"https://raw.githubusercontent.com/username/reponame/master/hello-world.bin\" #define EY_REMOTE_OTA_TIMEOUT_MS 60000 //--------- Database --------- #define SPREADSHEET_ID \"unique-spreadsheet-id\" #endif /* __EY_IOT_CONFIG_H__ */","title":"Configuring e-Yantra IoT Framework"}]}